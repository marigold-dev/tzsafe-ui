diff --git a/components/transferForm.tsx b/components/transferForm.tsx
index 0eeb068..1ee00a0 100644
--- a/components/transferForm.tsx
+++ b/components/transferForm.tsx
@@ -2,18 +2,221 @@ import {
     ErrorMessage,
     Field,
     FieldArray,
-
     Form,
     Formik,
-
+    useFormikContext,
 } from "formik";
-import React, { useContext, useState } from "react";
+import React, { useContext, useEffect, useState } from "react";
 import { AppStateContext, contractStorage } from "../context/state";
 import { VersionedApi } from "../versioned/apis";
 import { Versioned } from "../versioned/interface";
 import ContractLoader from "./contractLoader";
 import TextInputWithCompletion from "./textInputWithComplete";
+import { emitMicheline, Parser } from "@taquito/michel-codec"
+import { TokenSchema } from "@taquito/michelson-encoder";
+function capitalizeFirstLetter(s: string): string {
+    return s.charAt(0).toUpperCase() + s.slice(1);
+}
+function RenderItem({ item, field, parent }: React.PropsWithoutRef<{ item: TokenSchema, field?: string, parent?: string }>) {
+    const { values, setFieldValue, getFieldProps } = useFormikContext<any>();
+    if ("or" == item?.__michelsonType) {
+        let fieldV = field && field.startsWith(".") ? parent + field : field || "entrypoint"
+        console.log('t', item, parent, field)
+        return (
+            <div className="flex flex-col">
+                <label className="text-white">
+                    {capitalizeFirstLetter(field?.replace("payload", values.entrypoint) || "entrypoint")}
+                </label>
+                <Field className="text-black" name={fieldV === "entrypoint" ? fieldV : ((parent == "payload" || !!parent) ? "" : (!!parent ? parent + "." : "payload.")) + fieldV + (parent ? ".type" : "")} as="select">
+                    {Object.entries(item.schema).map(([k, _]) => {
+                        return <option className="text-black" key={k} value={k} >{k}</option>
+                    })}
+                </Field>
+                <RenderItem parent={fieldV === "entrypoint" ? "payload" : parent} field={parent ? fieldV : ""} item={field ? item.schema[getFieldProps(parent ? fieldV + ".type" : fieldV).value] : item.schema[values.entrypoint]} />
+            </div >
+        )
 
+    }
+    if ("unit" == item?.__michelsonType) {
+        if (getFieldProps(parent).value == undefined || Object.keys(getFieldProps((parent)).value).length !== 0 || Array.isArray(getFieldProps((parent)).value)) {
+            setTimeout(() => {
+                setFieldValue(parent! ? parent : "payload", {})
+            }, 100)
+        }
+        // setFieldValue((parent ? parent : "") + (field), {})
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("list" == item?.__michelsonType || "set" == item?.__michelsonType) {
+        console.log("t", field, `p: ${parent}`, item)
+        let fieldd = field! ? "." + field : ""
+        console.log(parent!.split(".").concat(field!.split(".")).filter(x => !!x), values)
+        let path = (parent!.split(".").concat(field!.split(".")).filter(x => !!x)).reduce((acc, i: any) => acc[i], values) || []
+
+        if ((getFieldProps(!!!parent ? "payload" : parent! + fieldd).value == undefined || !Array.isArray(getFieldProps((!!!parent ? "payload" : parent! + fieldd)).value))) {
+            setTimeout(() => {
+                setFieldValue(!!!parent ? "payload" : parent! + fieldd, [])
+            }, 100)
+        }
+        return (
+            <FieldArray name={!!!parent ? "payload" : parent! + fieldd}>
+                {({ push, remove }) => {
+                    return (
+                        <div className="w-full grid gap-2 grid-flow-row grid-cols-1">
+                            {path && Object.entries(path).map(([k, v]) => {
+                                return (
+                                    <div key={k} className="w-full grid gap-2 grid-flow-row grid-cols-1">
+                                        <RenderItem parent={parent ? "payload" : parent + "." + k} field={(!!fieldd ? parent : field) + "." + k} item={item.schema} />
+                                    </div>
+                                )
+                            })}
+                            <div className="flex flex-col md:flex-row">
+                                {Object.keys(path).length > 0 &&
+                                    <button
+                                        type="button"
+                                        className={
+                                            " bg-primary hover:bg-red-500 focus:bg-red-500 font-medium text-white p-1.5 md:self-end self-center justify-self-end block md:mx-auto mx-none  hover:outline-none border-2 hover:border-gray-800  hover:border-offset-2  hover:border-offset-gray-800"
+                                        }
+                                        onClick={(e) => {
+                                            e.preventDefault();
+                                            remove(0);
+                                        }}
+                                    >
+                                        Remove
+                                    </button>
+                                }
+                                <button
+                                    type="button"
+                                    className="bg-primary hover:bg-red-500 focus:bg-red-500 font-medium text-white p-1.5 md:self-end self-center justify-self-end block md:mx-auto mx-none  hover:outline-none border-2 hover:border-gray-800  hover:border-offset-2  hover:border-offset-gray-800"
+                                    onClick={(e) => {
+                                        e.preventDefault();
+                                        push(typeof item.schema.schema == "object" ? { type: Object.keys(item.schema.schema)[0] } : { [item.schema.schema]: {} });
+                                    }}
+                                >
+                                    Add More
+                                </button>
+                            </div>
+                        </div>
+                    )
+
+                }
+                }
+            </FieldArray>
+        )
+    }
+
+    if ("pair" == item?.__michelsonType) {
+        console.log("pair", field, parent)
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("option" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("map" == item?.__michelsonType || "big_map" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("constant" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("contract" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("sapling_transaction_deprecated" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("sapling_transaction" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("lambda" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("ticket_deprecated" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("ticket" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if ("sapling_state" == item?.__michelsonType) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+
+    }
+    if (item) {
+        return (<p>{field}: {item.__michelsonType}</p>)
+    }
+
+    let exhaust: never = item
+    return null
+
+}
+function ExecuteForm(props: React.PropsWithoutRef<{ address: string }>) {
+    let state = useContext(AppStateContext)!
+    let [shape, setShape] = useState<any>(null)
+    let address = props.address
+    useEffect(
+        () => {
+            (async () => {
+                let c = await state.connection.contract.at(address)
+
+                // this is needed
+                console.log(c.parameterSchema.generateSchema())
+                setShape({ entrypoint: [...Object.keys(c.entrypoints.entrypoints)][0], schema: c.parameterSchema.generateSchema() })
+                console.log(c.entrypoints.entrypoints["create_proposal"])
+                console.log(emitMicheline(c.script.code[0] as any, { indent: "", newline: "", }))
+                let p = new Parser()
+                console.log(emitMicheline(p.parseJSON(c.parameterSchema.EncodeObject({ "default": {} }))))
+            })()
+        }
+        , [])
+
+    return (
+        <div className="text-white">
+            <Formik
+                initialValues={{ entrypoint: shape?.entrypoint }}
+                onSubmit={async (values) => {
+                    console.log(values)
+                }}
+            >
+                {({ values, errors }) => (
+                    <Form className="w-full flex grow flex-col justify-center items-center align-self-center justify-self-center col-span-2">
+                        <div className="text-2xl font-medium self-center mb-2 text-white">
+                            Add items below
+                        </div>
+                        <div className="grid grid-flow-row gap-4 items-start mb-2 w-full">
+                            {shape && <RenderItem item={shape.schema as TokenSchema} />}
+                        </div>
+                        <div className="flex flex-row md:w-1/3 justify-around">
+                            <button
+                                className=" bg-primary hover:bg-red-500 focus:bg-red-500 font-medium text-white my-2 p-2  hover:outline-none border-2 hover:border-gray-800  hover:border-offset-2  hover:border-offset-gray-800"
+                                onClick={(e) => {
+                                    e.preventDefault();
+                                }}
+                            >
+                                Cancel
+                            </button>
+                            {<button
+                                className=" bg-primary hover:bg-red-500 focus:bg-red-500 font-medium text-white my-2 p-2  hover:outline-none border-2 hover:border-gray-800  hover:border-offset-2  hover:border-offset-gray-800"
+                                type="submit"
+                            >
+                                Submit
+                            </button>}
+                        </div>
+                    </Form >
+                )
+                }
+            </Formik >
+        </div>
+    )
+}
 
 function TransferForm(
     props: React.PropsWithoutRef<{ address: string; closeModal: () => void, contract: contractStorage }>
@@ -21,7 +224,9 @@ function TransferForm(
     const state = useContext(AppStateContext)!;
     let [loading, setLoading] = useState(false);
     let [result, setResult] = useState<boolean | undefined>(undefined);
-
+    return (
+        <ExecuteForm address={props.address} />
+    )
     if (state?.address == null) {
         return null;
     }
@@ -153,13 +358,6 @@ function TransferForm(
                                                         const withTextArea = transfer.fields.find(x => x?.kind === "textarea") ? " w-full md:w-full " : ""
                                                         let width = arr.length === 1 && !transfer.fields.find(x => x?.kind === "textarea") ? " w-3/4 " : ""
                                                         let classn = (idx + 1) % 2 === 0 ? "relative flex flex-col w-full md:grow justify-start" : "flex flex-col"
-
-                                                        // let onRef = (!!value.kind && value.kind === "input-complete") ? ((e: HTMLInputElement) => {
-                                                        //     if (e) {
-                                                        //         !!e.value ? shouldComplete.current = true : shouldComplete.current = false
-                                                        //     }
-                                                        // }) : (() => { })
-                                                        // console.log(shouldComplete.current)
                                                         return (
                                                             <div className={classn + width + withTextArea} key={idx}>
                                                                 <label className="text-white">
